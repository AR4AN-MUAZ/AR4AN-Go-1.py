# Obfuscated with PyObfuscate
#ENCRYPTED BY :ANONYMOUS U7P4L
#VERSION :ALPHA
#GITHUB : https://github.com/U7P4L-IN
#FEEL THE POWER OF U7P4L...
# Time : Tue Apr 11 20:46:17 2023
# -------------------------------
###-----------------------------INFO---------------------------------###
# ENCRYPTED BY U7P4L IN
# VERSION : BETA
# GITHUB : https://github.com/U7P4L-IN
###-----------------------MAIN>MENU-------------------------###


_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'=='))